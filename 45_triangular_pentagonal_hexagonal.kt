/*

Compile with `kotlinc my_file.kt -include-runtime -d my_app.jar`
Run with `java -jar my_app.jar``

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6,  10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	     	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/

import kotlin.math.sqrt
import kotlin.math.floor

fun main() {
    var count = 0
    for (triangle in getTrianglesFrom(286)) {
        count++
        if (isPentagonal(triangle) && isHexagonal(triangle)) {
            println("Examined $count triangles")
            println("The answer is $triangle")
            break
        }
    }
}

fun getTrianglesFrom(startPoint: Long) = sequence {
    var i = startPoint
    while (true) {
        yield(i*(i+1)/2)
        i++
    }
}

/* 
The number is a triangle if the equation can be solved for an integer n

n(3n - 1)/2
3n^2 -n = 2k
n^2 - n/3 = 2k/3
n^2 - n/3 + 1/36 = 2k/3 + 1/36
(n - 1/6)^2 = 2k/3 + 1/36
n - 1/6 = sqrt(2k/3 + 1/36)
n = sqrt(2k/3 + 1/36) + 1/6
*/
fun isPentagonal(nr: Long): Boolean {
    val result = sqrt(2.0/3*nr + 1/36.0) + 1/6.0
    return result - floor(result) < 0.00001
}

/*
The number is a hexagon if the equation can be solved for an integer n

n(2n - 1) = k
2n^2 - n = k
n^2 - n/2 = k/2
n^2 - n/2 + 1/16 = k/2 + 1/16
(n - 1/4)^2 = k/2 + 1/16
n - 1/4 = sqrt(k/2 + 1/16)
n = sqrt(k/2 + 1/16) + 1/4
*/
fun isHexagonal(nr: Long): Boolean {
    
    val result = sqrt(nr/2.0 + 1.0/16) + 0.25
    return result - floor(result) < 0.00001
}
